트리 : 한 개 이상의 노드로 구성된 유한 집합

루트 노드 존재.
루트 노드 아래로
여러 분할 집합으로 나눠지는데, 이를 subtree라고 함.

node : 노드.
root : 루트 노드. 최상단.
terminal(leaf) : 제일 끝에. 뻗어나가는거 없는거.
nonterminal : terminal이 아닌 노드.
parent : 위로 올라가는관계.
children : 아래로 내려가는 관계.
sibling : 형제, 부모가 같은 노드.
ancestor : 부모를 포함한 모든 상단 노드.
descendant : 직계, 자식을 포함한 모든 하위 노드.
degree of a node : 노드의 자식 수.
degree of a tree : 트리에 존재하는 모든 degree 중 최댓값.
level of a node : 깊이. 루트가 1
height of a tree : terminal node의 level.

subtree : 트리에 속한 노드들의 부분집합.
공집합 빼고 하나만 속한 노드도 서브트리.
forest : 트리의 집합.

트리는 연결리스트로 표현 가능함.
루트가 처음에, 그 뒤에 서브트리와 자식 노드들이 링크됨.
트리는 연결리스트로 잘 안 씁니다~

트리는 리스트로 표현함.
노드 크기가 가변적인 것보다 고정되는 것이
데이터 표현 및 알고리즘 표현에 용이함.
일정크기 노드 사용. (degree of tree)

k-원 트리에서
노드수가 n이고 고정크기면
nk의 childfield 중 n(k-1) + 1개의 필트가 0이다.

pf) 루트 노드들을 제외한 모든 노드들은
자기 자신을 가르키는 childfield가 무조건 존재함.
:: n*k - (n - 1) = n(k-1) + 1

모든 트리는
Left Child - Right Sibling 형식으로 표현가능하고,
LCRS는 이진트리로 변형이 가능하다.
따라서 모든 트리는 이진 트리로 변형이 가능하다.
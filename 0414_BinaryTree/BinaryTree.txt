이진트리 : Binary tree
공백 이진 트리이거나
루트 노드가 존재하고 왼쪽, 오른쪽 서브트리로 구성됨.

모든 트리는 이진트리로 표현가능.

트리 <-> 공백트리 차이점 : 
1. 공백 이진 트리 존재.
2. 최대 2개의 자식 노드 가짐.
3. 서브트리 순서 중요.

Lemma 5.2) 
1. level i의 binary tree : 2^(i-1) 
pf 생략.

2. max # of nodes in depth k binary tree : 2^k-1
pf)
2^0 + ... + 2^(k-1) = 2^k - 1
최소 : 2^(k-1)

3. nonempty bt T, 
n0 = n2 + 1

pf) 
node # = n0 + n1 + n2
node # = edge # + 1 = 1 + 1*n1 + 2*n2
::: 1 + n1 + 2n2 = n0 + n1 + n2
::: n0 = n2 + 1

------------------------------------------

Full Binary Tree : 
Depth == k, node # == 2^k - 1
모든 레벨의 노드가 꽉 찬 이진트리로

Complete Binary Tree : 
1~(k - 1)까지 Full, 
마지막 레벨에서 왼쪽에서 오른쪽으로 노드 채워진 이진 트리.

Skewed Binary Tree : 
트리 노드가 왼쪽이나 오른쪽으로 한쪽으로만 노드가 있는 트리.

----------------------------------------------

from lemma 5.2, 
n개의 노드를 갖는 완전 이진 트리의 높이는
ceil( log2(n+1) )

pf) 높이가 k : 
2^(k-1) <= n <= 2^(k) - 1
log2(n + 1) <= k <= log2(n) + 1
k는 정수이고, 
0 < log2(n) + 1 - log2(n+1) < 1 이므로
k = ceil(log2(n+1))

----------------------------------------------

Binary Tree 표현 : 
1. Array

노드 n개, index : 1 ~ n
parent(i) = i/2 ( i != 1)
i == 1이면 부모 없음.
l_c : 2i, 2i > n이면 l_c 없음.
r_c : 2i + 1, 2i + 1 > n이면 r_c 없음.

2. Linked Representation


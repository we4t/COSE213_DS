해싱 : 
주소 공간 >> 키 값 공간
ex) 13자리의 주민등록번호 : 
가능한 주민등록 번호의 수 : 10^13
실제 유효한 주민등록 번호의 수 : 10^8
10^8개 이하의 레코드 공간을 갖도록 하여 저장 공간의 낭비를 막음.

해시 함수를 이용하여 키 값을 주소로 변환하여, 이 변환된 주소에
레코드를 저장하고 검색함.

버킷 : 하나의 주소에 사상되는 공간.
해시의 주소 : 정적 해싱, 동적 해싱

딕셔너리 페어 : 
해시 테이블에 저장됨.
해시 테이블은 b개의 버킷으로 분할됨.
한 버킷은 s개의 슬롯으로 구성됨.
한 슬롯에 하나의 페어가 저장됨.

키 밀도 : n / T
n : 키 개수
T : 가능한 전체 키

적재 밀도 : n / s*b

충돌 : home bucket is not empty
오버플로우 : home bucket is full
슬롯이 1개이면 충돌과 오버플로우가 동시에 일어남.

적재 밀도가 낮으면 공간 효율이 떨어지고,
적재 밀도가 높으면 삽입/검색 시 접근 시간이 길어짐
실험적으로, 적재 밀도가 70%이상이 되면 충돌 가능성이 높음.

Ex) 해싱을 할 때 단어의 첫 글자를 기준으로 해싱
10개의 문자를 입력할 경우,슬롯 = 2
가능한 식별자 : 0~25
적재 밀도 : 10 / 26*2 

헤시에서 걸리는 시간 : 해시 함수 계산 시간 + 버킷 탐색 소요 시간.

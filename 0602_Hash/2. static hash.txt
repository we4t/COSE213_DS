해시 함수 : 
h(k) : 홈 주소
h(k1) == h(k2) : k1, k2는 h의 동거자(synonym)

이상적인 경우, dictionary 쌍들은 모두 해당 홈 버킷에 저장됨.
해시 함수는 편중되지 않고 계산이 쉽고 충돌이 적어야 함.

균일 해시 함수 : 
b, k1
h(k) = i 일 확률 : 1/buffer
h(k) = i 가 될 확률은 모든 버킷 i에 대해 i/b임.

b개의 버킷 각각에 대응될 확률이 모두 같음.
해시 함수의 값이 고르게 분포되어야 함.

1) division
h(k) = k % D
D의 선택이 오버플로우 발생에 영향을 미침.
D를 소수 값으로 선택하고, D가 클수록 해시 함수의 성능이 좋음.

2) mid-square
키를 제곱하고, 중간 몇 비트를 취해서 주소를 계산.
버킷 주소를 얻기 위해 사용되는 주간 비트의 수는
해시 테이블 크기에 달려있음.
제곱수의 중간 비트는 그 키의 모든 비트에 의존하므로, 
서로 다른 키들은 서로 다른 해시 주소를 갖게 될 확률이 높음.

3) folding
숫자로 된 키 k를 몇 부분으로 나눔.
ex) 12320324111220 (14자리) -> 버킷의 수는 999개 (3자리로 축소)

shift folding : 그냥 다 더하는거
123 + 203 + 241 + 112 + 20 = 699
folding at the boundaries : 경계 접지
긴 종이를 계속 접어서 하나의 방향으로 쌓는 방식
123 + 302 + 241 + 211 + 20 = 897

4) digital analysis
모든 키를 미리 알고 있을 경우 유용함.
키의 각 자리수에 편중되지 않는 수들을
해시 테이블의 크기에 적합한 만큼 조합해서 해시 주소로 사용.
ex) 학번

쿤자를 정수로 변환하는 법

1) 첫 글자 선택
2-1) 문자를 수로 변환
2-2) 2개씩 처리해서 8비트 이동시켜 더하기
ex) abcd
a + b<<8 + c + d<<8

----------------------------------------------------
오버플로우 처리 방법
1. 개방 주소법 (open addressing)
- 배열 이용
- 충돌이 일어난 항목을 해시테이블 내에 다른 빈 공간에 저장
- 기법
	선형 조사법
	이차 조사법
	재해싱
	임의 조사법


1) 선형 조사법
충돌이 일어나면 다음 빈 버킷을 찾아 저장함.
index : (h(k) + i) % b
0 <= i <= table_size -1

단점 : 키들이 클러스터 되는 경향
한 쪽으로 몰림..

2) 이차 조사법
클러스터의 크기를 줄이기 위해 이용.
바로 다음 주소가 아닌, 이차함수에 의한 값만큼 떨어진 주소를 확인함.
특정 영역에 원소가 몰리더라도 빨리 벗어날 수 있음.

h(k), (h(k) + i^2) % b, (h(k) - i^2) % b 

단점 : 이차 조사법은 2차 군집에 취약함.
여러 개의 원소가 동일한 초기 해시 함수값을 가지므로 2차 군집 발생
최초 해시값이 같은 원소들은 이차 조사로도 군집을 해결하지 못함

3) 재해싱
여러 개의 해시 함수를 사용하는 방법
-> 이중 재해싱
h1(k) % b, (h1(k) + 1 * h2(k)) % b, (h1(k) + 2h2(k)) % b ...

----------------------------------------------------

2. 체인법
- 연결 리스트를 사용
- 각 버킷에 고정된 슬롯이 아닌
- 연결 리스트에 데이터를 저장함.
- 원하는 항목을 찾을 때 까지 연결 리스트를 순차 탐색

동거자들을 연결 리스트로 구성.
선형 조사법에서의 불필요한 키 비교를 안 해도 됨!

체인법은 균형 트리와 같은 상용 기법보다 성능이 우수함.
최악의 경후, 비교 횟수 : O(n)
-> 동거자들을 균형 탐색 트리에 저장하면 O(log n)

chaining을 균일 해시 함수와 함께 사용하는 경우
해시함수에 따라 해시 테이블의 성능이 달라짐.
체인 기법과 division을 사용하면 가장 성능이 좋음.

----------------------------------------------------
*검색 시간 분석*
이론적으로는 chaining이 개방주소 방식보다 평균 조사 횟수가 적음.
자신과 충돌하지 않는 원소들끼리는 검색에 영향을 주지 않음.

chaining이 더 나은가?
적재율이 높지 않으면 (1/2 이하) 개방 주소 방법이 나음.

충돌 시 다음 빈 버킷이 없다면 해시 테이블이 full 상태임!
해시 테이블의 크기를 늘려야 함. (동적 해싱)

실제로는, 해시 테이블이 다 찼을 때가 아닌, 미리 명세된 경계값을 넘을 때 
해시 테이블의 크기를 늘림.

해시 테이블의 크기를 다시 정할 때 해시 함수도 바꿔야 함. 그 크기에 맞게.
새로 만든 해시 테이블에 원래 데이터를 다시 사상해야 함.
---------------------------------------------------